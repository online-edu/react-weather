{"version":3,"sources":["components/chart/Chart.js","components/spinner/Spinner.js","components/city/City.js","components/footer/Footer.js","components/search/Search.js","components/header/Header.js","components/weather/forecast/ForecastDay.js","components/weather/forecast/Forecast.js","components/weather/Current.js","utils/config.js","utils/days.js","utils/request.js","components/weather/WeatherService.js","components/weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["style","chartContainer","width","height","Chart","data","this","props","react_default","a","createElement","className","es6","margin","top","right","left","bottom","axisLine","tickLine","tickMargin","dataKey","type","stroke","fill","dot","name","PropTypes","array","isRequired","PureComponent","Spinner","role","cities","country","aria","icon","City","_ref","cityClick","loader","spinner_Spinner","map","city","i","key","onClick","onKeyPress","aria-label","Footer","Date","getFullYear","Search","placeholder","disabled","Header","search_Search","ForecastDay","item","forecastClick","day","src","alt","maxTemp","minTemp","Forecast","forecast","forecast_ForecastDay","Current","current","Fragment","weather","Math","round","main","temp","Chart_Chart","chart","imageUrl","fullDay","utils_request","url","request","axios","get","then","resp","Promise","resolve","catch","error","reject","response","query","concat","getDate","date","replace","getDay","getCurrentWeather","iconReady","arguments","length","undefined","Object","objectSpread","getChartData","hours","_ref2","dt_txt","getHours","ampm","loadWeatherByDay","sessionStorage","getItem","JSON","parse","getWeatherFromStorage","getCityFromStorage","setDate","toString","loadWeatherByCity","_ref3","list","tempInHours","slice","tempInDays","sortedList","reduce","prev","prevDate","_current$weather$","slicedToArray","currentDate","entries","dayNumber","substring","existingItems","defineProperty","toConsumableArray","push","temp_min","temp_max","id","getWeatherForecast","setItem","stringify","_list$","Weather","_useState","useState","_useState2","currentWeather","setCurrentWeather","weather_Current","weather_forecast_Forecast","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","err","network","message","onCityClick","bind","assertThisInitialized","loadWeather","_this2","setState","finally","_this$state","components_header_Header","components_city_City","weather_Weather","components_footer_Footer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27d8876a.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { AreaChart, Area, XAxis, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst style = {\n  chartContainer: {\n    width: '100%',\n    height: '100px',\n  },\n};\n\nexport default class Chart extends PureComponent {\n  /**\n   * Chart props types.\n   */\n  static get propTypes() {\n    return {\n      /** Chart data */\n      data: PropTypes.array.isRequired,\n    };\n  }\n\n  /**\n   * Render method for component\n   */\n  render() {\n    const { data } = this.props;\n    return (\n      <div className=\"mb-3\" style={style.chartContainer}>\n        <ResponsiveContainer>\n          <AreaChart\n            data={data}\n            margin={{ top: 0, right: 30, left: 30, bottom: 0 }}\n          >\n            <XAxis\n              axisLine={false}\n              tickLine={false}\n              tickMargin={10}\n              dataKey=\"hours\"\n            />\n\n            <Tooltip />\n            <Area\n              type=\"monotone\"\n              dataKey=\"temp\"\n              stroke=\"#ffcb02\"\n              fill=\"#fff6d3\"\n              dot={true}\n              name=\"Temperature\"\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\n/**\n * Spinner component.\n */\nconst Spinner = () => (\n  <div className=\"spinner-border text-primary\" role=\"status\">\n    <span className=\"sr-only\">Loading...</span>\n  </div>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner';\nimport './City.scss';\n\nconst cities = [\n  { name: 'Vancouver', country: 'CA', aria: 'Flag: Canada', icon: '🇨🇦' },\n  { name: 'Chicago', country: 'US', aria: 'Flag: United States', icon: '🇺🇸' },\n  { name: 'Mumbai', country: 'IN', aria: 'Flag: India', icon: '🇮🇳' },\n  { name: 'Berlin', country: 'DE', aria: 'Flag: Germany', icon: '🇩🇪' },\n  { name: 'Tokyo', country: 'JP', aria: 'Flag: Japan', icon: '🇯🇵' },\n  { name: 'London', country: 'GB', aria: 'Flag: United Kingdom', icon: '🇬🇧' },\n];\n\n/**\n * City component.\n */\nconst City = ({ cityClick, loader }) => (\n  <div className=\"card mb-4\">\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">\n        Popular Cities\n        {loader && (\n          <div className=\"float-right\">\n            <Spinner />\n          </div>\n        )}\n      </h5>\n      <div className=\"row\">\n        {cities &&\n          cities.map((city, i) => (\n            <div className=\"col text-center\" key={i}>\n              <button\n                type=\"button\"\n                className=\"btn btn-link text-decoration-none city__btn\"\n                onClick={() => cityClick(city)}\n                onKeyPress={() => cityClick(city)}\n              >\n                <div>\n                  <span className=\"text-muted\">{city.name}</span>\n                </div>\n                <span\n                  className=\"city__btn--country-icon\"\n                  role=\"img\"\n                  aria-label={city.aria}\n                >\n                  {city.icon}\n                </span>\n              </button>\n            </div>\n          ))}\n      </div>\n    </div>\n  </div>\n);\n\n/**\n * City props types.\n */\nCity.propTypes = {\n  /** Toggle spinner */\n  loader: PropTypes.bool,\n  /** Gets called when the city button is clicked. */\n  cityClick: PropTypes.func.isRequired,\n};\nexport default City;\n","import React from 'react';\nimport './Footer.scss';\n\n/**\n * List empty component.\n */\nconst Footer = () => (\n  <footer className=\"weather-footer py-3\">\n    <div className=\"container\">\n      <p className=\"mb-0 font-weight-normal\">\n        ©&nbsp;\n        {new Date().getFullYear()}\n        &nbsp;Weather App Inc. All right reserved.\n      </p>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\n\n/**\n * Search component.\n */\nconst Search = () => (\n  <input\n    type=\"text\"\n    className=\"form-control mr-sm-2\"\n    aria-label=\"City input\"\n    placeholder=\"Type a city name...\"\n    disabled\n  />\n);\n\nexport default Search;\n","import React from 'react';\nimport Search from '../search';\nimport './Header.scss';\n\n/**\n * Header component.\n */\nconst Header = () => (\n  <nav className=\"navbar sticky-top weather-header pl-1\">\n    <button\n      type=\"button\"\n      className=\"navbar-brand btn-link btn weather-header__brand\"\n    >\n      Wether App\n      <span role=\"img\" aria-label=\"Weather\">\n        ☁️\n      </span>\n    </button>\n    <form className=\"form-inline my-2 my-lg-0\">\n      <Search />\n    </form>\n  </nav>\n);\nexport default Header;\n","import React from 'react';\n\n/**\n * ForecastDay component.\n */\nconst ForecastDay = ({ item, forecastClick }) => (\n  <div className=\"col text-center rounded forecast__day\">\n    <button\n      type=\"button\"\n      className=\"btn btn-link text-decoration-none\"\n      onClick={forecastClick}\n      onKeyPress={forecastClick}\n    >\n      <div>\n        <span className=\"text-muted\">{item.day}</span>\n      </div>\n      <img src={item.icon} alt={item.alt} />\n      <p className=\"text-muted text-center\">\n        <span className=\"mr-2\">{item.maxTemp}&deg;C</span>\n        <span>{item.minTemp}&deg;C</span>\n      </p>\n    </button>\n  </div>\n);\n\nexport default ForecastDay;\n","import React from 'react';\nimport './Forecast.scss';\nimport ForecastDay from './ForecastDay';\n\n/**\n * Forecast component.\n */\nconst Forecast = ({ data: forecast, forecastClick }) => (\n  <div className=\"row\">\n    {forecast &&\n      forecast.map((item, i) => (\n        <ForecastDay\n          forecastClick={() => forecastClick(item)}\n          item={item}\n          key={i}\n        />\n      ))}\n  </div>\n);\n\nexport default Forecast;\n","import React from 'react';\nimport Chart from '../chart';\n\n/**\n * Current component.\n */\nconst Current = ({ data: current }) => (\n  <React.Fragment>\n    <h5 className=\"card-title\">\n      {current.city.name} &ndash; {current.city.country}&nbsp;&nbsp;&nbsp;|\n      <img src={current.weather.icon} alt={current.weather.name} />\n      {Math.round(current.main.temp)}&deg;C {current.weather.main}\n      &nbsp;({current.day})\n    </h5>\n    <Chart data={current.chart} />\n  </React.Fragment>\n);\n\nexport default Current;\n","/** Api key for the open weather map */\nexport const key = '8f10d0c12d0872124c79bd426d5d1003';\n/** Api url for the open weather map */\nexport const api = 'https://api.openweathermap.org/data/2.5';\n/** Image url for the weather condition */\nexport const imageUrl = 'http://openweathermap.org/img/w';\n","export const days = i => fullDay[i].substring(0, 3);\n\nexport const fullDay = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n];\n","import axios from 'axios';\n/**\n * Request service for network calls.\n */\nexport default {\n  /**\n   * Get request\n   *\n   * @param {string} url - network request url\n   * @param {Object} request - request configuration\n   */\n  get(url, request) {\n    return axios\n      .get(url, request)\n      .then(resp => Promise.resolve(resp.data))\n      .catch(error => Promise.reject(error.response.data));\n  },\n};\n","import { api, key, imageUrl } from '../../utils/config';\nimport { days, fullDay } from '../../utils/days';\nimport request from '../../utils/request';\n\nconst query = `units=metric&APPID=${key}`;\n\n/**\n * Get date number from full date\n * @param {String} date - date\n * @returns {Number}\n */\nconst getDate = date => new Date(date.replace(/ /g, 'T')).getDate();\n\n/**\n * Get week day number from date\n * @param {String} date - date\n * @returns {Number}\n */\nconst getDay = date => new Date(date.replace(/ /g, 'T')).getDay();\n\n/**\n * Get weather forecast as an object\n * @param {Number} currentDate\n * @param {Number} dayNumber\n * @param {String} icon\n * @param {String} alt\n * @param {String} day\n * @param {Object} main\n * @returns {Object}\n */\nconst getWeatherForecast = (\n  currentDate,\n  dayNumber,\n  icon,\n  alt,\n  day,\n  { temp_min, temp_max },\n) => ({\n  date: currentDate,\n  id: dayNumber,\n  minTemp: Math.round(temp_min),\n  maxTemp: Math.round(temp_max),\n  icon: `${imageUrl}/${icon}.png`,\n  alt,\n  day,\n});\n\n/**\n * Get current weather as an object\n * @param {String} date\n * @param {Object} weather\n * @param {Object} main\n * @param {String} city\n * @param {Object[]} chart\n * @returns {Object}\n */\nconst getCurrentWeather = (\n  date,\n  weather,\n  main,\n  city,\n  chart,\n  iconReady = false,\n) => ({\n  day: fullDay[getDay(date)],\n  weather: {\n    ...weather,\n    icon: iconReady ? weather.icon : `${imageUrl}/${weather.icon}.png`,\n  },\n  main,\n  city,\n  chart,\n});\n\nconst getChartData = hours =>\n  hours.map(({ dt_txt, main: { temp } }) => {\n    let hours = new Date(dt_txt).getHours();\n    const ampm = hours >= 12 ? ' pm' : ' am';\n    hours = hours % 12;\n    hours = (hours ? hours : 12) + ampm;\n    return { hours, temp };\n  });\n\n/**\n * Retrieve all data from `sessionStorage`\n * @returns {Object[]}\n */\nconst getWeatherFromStorage = () => {\n  const data = sessionStorage.getItem('data');\n  return (data && JSON.parse(data)) || [];\n};\n\n/**\n * Retrieve city from `sessionStorage`\n * @returns {Object}\n */\nconst getCityFromStorage = () => {\n  const city = sessionStorage.getItem('city');\n  return (city && JSON.parse(city)) || {};\n};\n\n/**\n * Load weather by day\n * @param {Object} day\n * @returns {Object}\n */\nconst loadWeatherByDay = weather => {\n  const data = getWeatherFromStorage();\n  const city = getCityFromStorage();\n  const { date, day, maxTemp, alt } = weather;\n  const key = `${date}_${day}`;\n  const current = getCurrentWeather(\n    new Date().setDate(date).toString(),\n    { ...weather, main: alt },\n    { temp: maxTemp },\n    city,\n    getChartData(data[key]),\n    true,\n  );\n\n  return current;\n};\n\n/**\n * Load weather by city from server\n * @param {String} city - city name\n * @returns {Promise}\n */\nconst loadWeatherByCity = (city, country) =>\n  request\n    .get(`${api}/forecast?q=${city},${country}&${query}`)\n    .then(({ city, list }) => {\n      // Format data for chart for current day\n      const tempInHours = getChartData(list.slice(0, 8));\n      // Format data for next 5 days\n      const tempInDays = [];\n      let sortedList = {};\n      list.reduce((prev, current) => {\n        const {\n          dt_txt,\n          main,\n          weather: [{ icon, main: alt }],\n        } = current;\n        const currentDate = getDate(dt_txt);\n        let prevDate;\n        if (Object.entries(prev).length !== 0) prevDate = getDate(prev.dt_txt);\n        const dayNumber = getDay(dt_txt);\n        const day = days(dayNumber);\n        const key = `${currentDate}_${day}`;\n        const existingItems = sortedList[key] || [];\n        sortedList = {\n          ...sortedList,\n          [key]: [...existingItems, current],\n        };\n        if (currentDate !== prevDate) {\n          tempInDays.push(\n            getWeatherForecast(currentDate, dayNumber, icon, alt, day, main),\n          );\n        }\n        return current;\n      }, []);\n\n      sessionStorage.setItem('data', JSON.stringify(sortedList));\n      sessionStorage.setItem('city', JSON.stringify(city));\n      // Get data for current time `getCurrentWeather`\n      const [\n        {\n          dt_txt,\n          main,\n          weather: [weather],\n        },\n      ] = list;\n\n      return Promise.resolve({\n        forecast: tempInDays,\n        current: getCurrentWeather(dt_txt, weather, main, city, tempInHours),\n      });\n    });\n\nexport { loadWeatherByCity, loadWeatherByDay };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Forecast from './forecast';\nimport Current from './Current';\nimport { loadWeatherByDay } from './WeatherService';\n\n/**\n * Weather component.\n */\nconst Weather = ({ forecast, current }) => {\n  const [currentWeather, setCurrentWeather] = useState(current);\n\n  function onForecastClick(day) {\n    setCurrentWeather(loadWeatherByDay(day));\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <Current data={currentWeather} />\n        <div className=\"dropdown-divider\" />\n        <Forecast data={forecast} forecastClick={onForecastClick} />\n      </div>\n    </div>\n  );\n};\n\n/**\n * Weather props types.\n */\nWeather.propTypes = {\n  /** Forecast data */\n  forecast: PropTypes.array.isRequired,\n  /** Current weather data */\n  current: PropTypes.shape({ day: PropTypes.string }).isRequired,\n};\nexport default Weather;\n","// @flow\nimport React, { Component } from 'react';\nimport { City, Footer, Header, Weather } from './components';\nimport { loadWeatherByCity } from './components/weather/WeatherService';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: '',\n      data: {},\n      loader: true,\n      err: { network: false, message: '' },\n    };\n    this.onCityClick = this.onCityClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadWeather('Vancouver', 'CA');\n  }\n\n  onCityClick(city) {\n    const { name, country } = city;\n    this.loadWeather(name, country);\n  }\n\n  loadWeather(name, country) {\n    this.setState({ loader: true });\n    loadWeatherByCity(name, country)\n      .then(data => {\n        this.setState({ data });\n      })\n      .catch(error => {\n        this.setState({\n          err: { network: true, message: error.message },\n        });\n      })\n      .finally(() => this.setState({ loader: false }));\n  }\n\n  render() {\n    const { data, loader, err } = this.state;\n    return (\n      <React.Fragment>\n        <Header />\n        <main>\n          <div className=\"container py-4 weather\">\n            <City cityClick={this.onCityClick} loader={loader} />\n            {!loader && !err.network && (\n              <Weather\n                current={data.current}\n                chart={data.chart}\n                forecast={data.forecast}\n              />\n            )}\n            {err.network && (\n              <div className=\"alert alert-danger\" role=\"alert\">\n                {err.message}\n              </div>\n            )}\n          </div>\n        </main>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}