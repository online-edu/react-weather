{"version":3,"sources":["components/search/Search.js","components/weather/forecast/ForecastDay.js","components/weather/forecast/Forecast.js","components/chart/Chart.js","components/weather/Current.js","utils/config.js","utils/days.js","utils/request.js","components/weather/WeatherService.js","components/weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Search","react_default","a","createElement","className","type","aria-label","placeholder","aria-describedby","ForecastDay","_ref","item","forecastClick","onClick","onKeyPress","day","src","icon","alt","maxTemp","minTemp","Forecast","forecast","data","map","i","forecast_ForecastDay","key","style","chartContainer","width","height","Chart","this","props","es6","margin","top","right","left","bottom","axisLine","tickLine","tickMargin","dataKey","stroke","fill","dot","PureComponent","Current","current","Fragment","weather","name","Math","round","main","temp","city","country","Chart_Chart","chart","imageUrl","fullDay","utils_request","url","request","axios","get","then","resp","Promise","resolve","catch","err","reject","query","concat","getDate","date","Date","getDay","getCurrentWeather","iconReady","arguments","length","undefined","Object","objectSpread","getChartData","hours","_ref2","dt_txt","getHours","ampm","loadWeatherByDay","sessionStorage","getItem","JSON","parse","getWeatherFromStorage","getCityFromStorage","console","log","setDate","loadWeatherByCity","_ref3","list","localStorage","setItem","stringify","tempInHours","slice","tempInDays","sortedList","reduce","prev","_current$weather$","slicedToArray","currentDate","prevDate","dayNumber","substring","existingItems","defineProperty","toConsumableArray","push","temp_min","temp_max","id","getWeatherForecast","_list$","Weather","_useState","useState","_useState2","currentWeather","setCurrentWeather","weather_Current","weather_forecast_Forecast","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loader","_this2","setState","_this$state","search_Search","weather_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAiBeA,EAZA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLD,UAAU,eACVE,aAAW,uBACXC,YAAY,mBACZC,mBAAiB,mCCaRC,UApBK,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,cAAT,OAClBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,UACEE,KAAK,SACLD,UAAU,oCACVS,QAASD,EACTE,WAAYF,GAEZX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcO,EAAKI,MAErCd,EAAAC,EAAAC,cAAA,OAAKa,IAAKL,EAAKM,KAAMC,IAAKP,EAAKO,MAC/BjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQO,EAAKQ,QAA7B,SACAlB,EAAAC,EAAAC,cAAA,YAAOQ,EAAKS,QAAZ,cCCOC,EAbE,SAAAX,GAAA,IAASY,EAATZ,EAAGa,KAAgBX,EAAnBF,EAAmBE,cAAnB,OACfX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZkB,GACCA,EAASE,IAAI,SAACb,EAAMc,GAAP,OACXxB,EAAAC,EAAAC,cAACuB,EAAD,CACEd,cAAe,kBAAMA,EAAcD,IACnCA,KAAMA,EACNgB,IAAKF,gBCXTG,EAAQ,CACZC,eAAgB,CACdC,MAAO,OACPC,OAAQ,UAISC,mLACV,IACCT,EAASU,KAAKC,MAAdX,KACR,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOwB,MAAOA,EAAMC,gBACjC5B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACEZ,KAAMA,EACNa,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAEhDvC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACEM,UAAU,EACVC,UAAU,EACVC,WAAY,GACZC,QAAQ,UAGV3C,EAAAC,EAAAC,cAACgC,EAAA,EAAD,MACAlC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACE9B,KAAK,WACLuC,QAAQ,OACRC,OAAO,UACPC,KAAK,UACLC,KAAK,cAvBgBC,iBCapBC,EAjBC,SAAAvC,GAAA,IAASwC,EAATxC,EAAGa,KAAH,OACdtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMiD,SAAP,KACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKa,IAAKkC,EAAQE,QAAQnC,KAAMC,IAAKgC,EAAQE,QAAQC,OACpDC,KAAKC,MAAML,EAAQM,KAAKC,MAF3B,SAEyCP,EAAQE,QAAQI,KAFzD,QAIGN,EAAQQ,KAAKL,KAJhB,WAI+BH,EAAQQ,KAAKC,QAJ5C,QAKGT,EAAQnC,OAIfd,EAAAC,EAAAC,cAACyD,EAAD,CAAOrC,KAAM2B,EAAQW,mCCdZC,EAAW,kCCHXC,EAAU,CACrB,SACA,SACA,UACA,YACA,WACA,SACA,8BCLaC,EAAA,SAOTC,EAAKC,GACP,OAAOC,IACJC,IAAIH,EAAKC,GACTG,KAAK,SAAAC,GAAI,OAAIC,QAAQC,QAAQF,EAAK/C,QAClCkD,MAAM,SAAAC,GAAG,OAAIH,QAAQI,OAAOD,MCX7BE,EAAK,sBAAAC,OHHQ,oCGSbC,EAAU,SAAAC,GAAI,OAAI,IAAIC,KAAKD,GAAMD,WAOjCG,EAAS,SAAAF,GAAI,OAAI,IAAIC,KAAKD,GAAME,UAsChCC,EAAoB,SACxBH,EACA3B,EACAI,EACAE,EACAG,GALwB,IAMxBsB,EANwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAOpB,CACJrE,IAAKgD,EAAQkB,EAAOF,IACpB3B,QAAQmC,OAAAC,EAAA,EAAAD,CAAA,GACHnC,EADE,CAELnC,KAAMkE,EAAY/B,EAAQnC,KAAX,GAAA4D,OAAqBf,EAArB,KAAAe,OAAiCzB,EAAQnC,KAAzC,UAEjBuC,OACAE,OACAG,UAGI4B,EAAe,SAAAC,GAAK,OACxBA,EAAMlE,IAAI,SAAAmE,GAAgC,IAA7BC,EAA6BD,EAA7BC,OAAgBnC,EAAakC,EAArBnC,KAAQC,KACvBiC,EAAQ,IAAIV,KAAKY,GAAQC,WACvBC,EAAOJ,GAAS,GAAK,MAAQ,MAGnC,MAAO,CAAEA,MADTA,IADAA,GAAgB,KACS,IAAMI,EACfrC,WA0BdsC,EAAmB,SAAA3C,GACvB,IAAM7B,EApBsB,WAC5B,IAAMA,EAAOyE,eAAeC,QAAQ,QACpC,OAAQ1E,GAAQ2E,KAAKC,MAAM5E,IAAU,GAkBxB6E,GACP1C,EAZmB,WACzB,IAAMA,EAAOsC,eAAeC,QAAQ,QACpC,OAAQvC,GAAQwC,KAAKC,MAAMzC,IAAU,GAUxB2C,GACbC,QAAQC,IAAInD,GAHsB,IAI1B2B,EAA4B3B,EAA5B2B,KAAMhE,EAAsBqC,EAAtBrC,IAAKI,EAAiBiC,EAAjBjC,QAASD,EAAQkC,EAARlC,IACtBS,EAAG,GAAAkD,OAAME,EAAN,KAAAF,OAAc9D,GAUvB,OATgBmE,GACd,IAAIF,MAAOwB,QAAQzB,GADYQ,OAAAC,EAAA,EAAAD,CAAA,GAE1BnC,EAF0B,CAEjBI,KAAMtC,IACpB,CAAEuC,KAAMtC,GACRuC,EACA+B,EAAalE,EAAKI,KAClB,IAWE8E,EAAoB,eAAC/C,EAAD0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAQ,SAAR,OACxBlB,EAAA,GAAAW,OH9HiB,0CG8HjB,gBAAAA,OAAiCnB,EAAjC,KAAAmB,OAAyCD,IAASP,KAAK,SAAAqC,GAAoB,IAAjBhD,EAAiBgD,EAAjBhD,KAAMiD,EAAWD,EAAXC,KAC9DC,aAAaC,QAAQ,UAAWX,KAAKY,UAAUH,IAE/C,IAAMI,EAActB,EAAakB,EAAKK,MAAM,EAAG,IAEzCC,EAAa,GACfC,EAAa,GACjBP,EAAKQ,OAAO,SAACC,EAAMlE,GAAY,IAE3B0C,EAGE1C,EAHF0C,OACApC,EAEEN,EAFFM,KAH2B6D,EAAA9B,OAAA+B,EAAA,EAAA/B,CAKzBrC,EADFE,QAJ2B,MAIfnC,EAJeoG,EAIfpG,KAAYC,EAJGmG,EAIT7D,KAEd+D,EAAczC,EAAQc,GACtB4B,EAAW1C,EAAQsC,EAAKxB,QACxB6B,EAAYxC,EAAOW,GACnB7E,EFjJagD,EEiJF0D,GFjJaC,UAAU,EAAG,GEkJrC/F,EAAG,GAAAkD,OAAM0C,EAAN,KAAA1C,OAAqB9D,GACxB4G,EAAgBT,EAAWvF,IAAQ,GAUzC,OATAuF,EAAU3B,OAAAC,EAAA,EAAAD,CAAA,GACL2B,EADK3B,OAAAqC,EAAA,EAAArC,CAAA,GAEP5D,EAFO,GAAAkD,OAAAU,OAAAsC,EAAA,EAAAtC,CAEGoC,GAFH,CAEkBzE,MAExBqE,IAAgBC,GAClBP,EAAWa,KA5HQ,SACzBP,EACAE,EACAxG,EACAC,EACAH,EALyBL,GAAA,IAMvBqH,EANuBrH,EAMvBqH,SAAUC,EANatH,EAMbsH,SANa,MAOrB,CACJjD,KAAMwC,EACNU,GAAIR,EACJrG,QAASkC,KAAKC,MAAMwE,GACpB5G,QAASmC,KAAKC,MAAMyE,GACpB/G,KAAI,GAAA4D,OAAKf,EAAL,KAAAe,OAAiB5D,EAAjB,QACJC,MACAH,OA+GQmH,CAAmBX,EAAaE,EAAWxG,EAAMC,EAAKH,EAAKyC,IAGxDN,GACN,IAEH8C,eAAea,QAAQ,OAAQX,KAAKY,UAAUI,IAC9ClB,eAAea,QAAQ,OAAQX,KAAKY,UAAUpD,IAhC2B,IAAAyE,EAAA5C,OAAA+B,EAAA,EAAA/B,CAwCrEoB,EAxCqE,MAoCrEf,EApCqEuC,EAoCrEvC,OACApC,EArCqE2E,EAqCrE3E,KACUJ,EAtC2DmC,OAAA+B,EAAA,EAAA/B,CAAA4C,EAsCrE/E,QAtCqE,MA0CzE,OAAOmB,QAAQC,QAAQ,CACrBlD,SAAU2F,EACV/D,QAASgC,EAAkBU,EAAQxC,EAASI,EAAME,EAAMqD,QCnJ/CqB,EAlBC,SAAA1H,GAA2B,IAAxBY,EAAwBZ,EAAxBY,SAAU4B,EAAcxC,EAAdwC,QAAcmF,EACGC,mBAASpF,GADZqF,EAAAhD,OAAA+B,EAAA,EAAA/B,CAAA8C,EAAA,GAClCG,EADkCD,EAAA,GAClBE,EADkBF,EAAA,GAOzC,OACEtI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACuI,EAAD,CAASnH,KAAMiH,IACfvI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAACwI,EAAD,CAAUpH,KAAMD,EAAUV,cAThC,SAAyBG,GACvB0H,EAAkB1C,EAAiBhF,UC2BxB6H,cAjCb,SAAAA,IAAc,IAAAC,EAAA,OAAAtD,OAAAuD,EAAA,EAAAvD,CAAAtD,KAAA2G,IACZC,EAAAtD,OAAAwD,EAAA,EAAAxD,CAAAtD,KAAAsD,OAAAyD,EAAA,EAAAzD,CAAAqD,GAAAK,KAAAhH,QACKiH,MAAQ,CACXxF,KAAM,GACNnC,KAAM,GACN4H,QAAQ,GALEN,mFASM,IAAAO,EAAAnH,KAClBwE,IAAoBpC,KAAK,SAAA9C,GACvB6H,EAAKC,SAAS,CAAEF,QAAQ,EAAO5H,4CAI1B,IAAA+H,EACkBrH,KAAKiH,MAAtB3H,EADD+H,EACC/H,KAAM4H,EADPG,EACOH,OAEd,OADA7C,QAAQC,IAAIhF,GAEVtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACoJ,EAAD,OACEJ,GACAlJ,EAAAC,EAAAC,cAACqJ,EAAD,CACEtG,QAAS3B,EAAK2B,QACdW,MAAOtC,EAAKsC,MACZvC,SAAUC,EAAKD,mBA1BTmI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/J,EAAAC,EAAAC,cAAC8J,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjG,KAAK,SAAAkG,GACjCA,EAAaC","file":"static/js/main.5deb20b7.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Search component.\n */\nconst Search = () => (\n  <div className=\"input-group input-group-lg mb-3\">\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      aria-label=\"Sizing example input\"\n      placeholder=\"Type a city name\"\n      aria-describedby=\"inputGroup-sizing-lg\"\n    />\n  </div>\n);\n\nexport default Search;\n","import React from 'react';\n\n/**\n * ForecastDay component.\n */\nconst ForecastDay = ({ item, forecastClick }) => (\n  <div className=\"col text-center rounded forecast__day\">\n    <button\n      type=\"button\"\n      className=\"btn btn-link text-decoration-none\"\n      onClick={forecastClick}\n      onKeyPress={forecastClick}\n    >\n      <div>\n        <span className=\"text-muted\">{item.day}</span>\n      </div>\n      <img src={item.icon} alt={item.alt} />\n      <p className=\"text-muted text-center\">\n        <span className=\"mr-2\">{item.maxTemp}&deg;C</span>\n        <span>{item.minTemp}&deg;C</span>\n      </p>\n    </button>\n  </div>\n);\n\nexport default ForecastDay;\n","import React from 'react';\nimport './Forecast.scss';\nimport ForecastDay from './ForecastDay';\n\n/**\n * Forecast component.\n */\nconst Forecast = ({ data: forecast, forecastClick }) => (\n  <div className=\"row\">\n    {forecast &&\n      forecast.map((item, i) => (\n        <ForecastDay\n          forecastClick={() => forecastClick(item)}\n          item={item}\n          key={i}\n        />\n      ))}\n  </div>\n);\n\nexport default Forecast;\n","import React, { PureComponent } from 'react';\nimport { AreaChart, Area, XAxis, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst style = {\n  chartContainer: {\n    width: '100%',\n    height: '100px',\n  },\n};\n\nexport default class Chart extends PureComponent {\n  render() {\n    const { data } = this.props;\n    return (\n      <div className=\"mb-3\" style={style.chartContainer}>\n        <ResponsiveContainer>\n          <AreaChart\n            data={data}\n            margin={{ top: 10, right: 30, left: 10, bottom: 0 }}\n          >\n            <XAxis\n              axisLine={false}\n              tickLine={false}\n              tickMargin={10}\n              dataKey=\"hours\"\n            />\n\n            <Tooltip />\n            <Area\n              type=\"monotone\"\n              dataKey=\"temp\"\n              stroke=\"#ffcb02\"\n              fill=\"#fff6d3\"\n              dot={true}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Chart from '../chart';\n\n/**\n * Current component.\n */\nconst Current = ({ data: current }) => (\n  <React.Fragment>\n    <div className=\"row\">\n      <div className=\"col\">\n        <h5>\n          <img src={current.weather.icon} alt={current.weather.name} />\n          {Math.round(current.main.temp)}&deg;C {current.weather.main}\n          &#x2c;&nbsp;\n          {current.city.name} &ndash; {current.city.country}&#x2c;&nbsp;\n          {current.day}\n        </h5>\n      </div>\n    </div>\n    <Chart data={current.chart} />\n  </React.Fragment>\n);\n\nexport default Current;\n","/** Api key for the open weather map */\nexport const key = '8f10d0c12d0872124c79bd426d5d1003';\n/** Api url for the open weather map */\nexport const api = 'https://api.openweathermap.org/data/2.5';\n/** Image url for the weather condition */\nexport const imageUrl = 'http://openweathermap.org/img/w';\n","export const days = i => fullDay[i].substring(0, 3);\n\nexport const fullDay = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n];\n","import axios from 'axios';\n/**\n * Request service for network calls.\n */\nexport default {\n  /**\n   * Get request\n   *\n   * @param {string} url - network request url\n   * @param {Object} request - request configuration\n   */\n  get(url, request) {\n    return axios\n      .get(url, request)\n      .then(resp => Promise.resolve(resp.data))\n      .catch(err => Promise.reject(err));\n  },\n};\n","import { api, key, imageUrl } from '../../utils/config';\nimport { days, fullDay } from '../../utils/days';\nimport request from '../../utils/request';\n\nconst query = `units=metric&APPID=${key}`;\n/**\n * Get date number from full date\n * @param {String} date - date\n * @returns {Number}\n */\nconst getDate = date => new Date(date).getDate();\n\n/**\n * Get week day number from date\n * @param {String} date - date\n * @returns {Number}\n */\nconst getDay = date => new Date(date).getDay();\n\n/**\n * Get weather forecast as an object\n * @param {Number} currentDate\n * @param {Number} dayNumber\n * @param {String} icon\n * @param {String} alt\n * @param {String} day\n * @param {Object} main\n * @returns {Object}\n */\nconst getWeatherForecast = (\n  currentDate,\n  dayNumber,\n  icon,\n  alt,\n  day,\n  { temp_min, temp_max },\n) => ({\n  date: currentDate,\n  id: dayNumber,\n  minTemp: Math.round(temp_min),\n  maxTemp: Math.round(temp_max),\n  icon: `${imageUrl}/${icon}.png`,\n  alt,\n  day,\n});\n\n/**\n * Get current weather as an object\n * @param {String} date\n * @param {Object} weather\n * @param {Object} main\n * @param {String} city\n * @param {Object[]} chart\n * @returns {Object}\n */\nconst getCurrentWeather = (\n  date,\n  weather,\n  main,\n  city,\n  chart,\n  iconReady = false,\n) => ({\n  day: fullDay[getDay(date)],\n  weather: {\n    ...weather,\n    icon: iconReady ? weather.icon : `${imageUrl}/${weather.icon}.png`,\n  },\n  main,\n  city,\n  chart,\n});\n\nconst getChartData = hours =>\n  hours.map(({ dt_txt, main: { temp } }) => {\n    let hours = new Date(dt_txt).getHours();\n    const ampm = hours >= 12 ? ' pm' : ' am';\n    hours = hours % 12;\n    hours = (hours ? hours : 12) + ampm;\n    return { hours, temp };\n  });\n\n/**\n * Retrieve all data from `sessionStorage`\n * @returns {Object[]}\n */\nconst getWeatherFromStorage = () => {\n  const data = sessionStorage.getItem('data');\n  return (data && JSON.parse(data)) || [];\n};\n\n/**\n * Retrieve city from `sessionStorage`\n * @returns {Object}\n */\nconst getCityFromStorage = () => {\n  const city = sessionStorage.getItem('city');\n  return (city && JSON.parse(city)) || {};\n};\n\n/**\n * Load weather by day\n * @param {Object} day\n * @returns {Object}\n */\nconst loadWeatherByDay = weather => {\n  const data = getWeatherFromStorage();\n  const city = getCityFromStorage();\n  console.log(weather);\n  const { date, day, maxTemp, alt } = weather;\n  const key = `${date}_${day}`;\n  const current = getCurrentWeather(\n    new Date().setDate(date),\n    { ...weather, main: alt },\n    { temp: maxTemp },\n    city,\n    getChartData(data[key]),\n    true,\n  );\n\n  return current;\n};\n\n/**\n * Load weather by city from server\n * @param {String} city - city name\n * @returns {Promise}\n */\nconst loadWeatherByCity = (city = 'London') =>\n  request.get(`${api}/forecast?q=${city}&${query}`).then(({ city, list }) => {\n    localStorage.setItem('weather', JSON.stringify(list));\n    // Format data for chart for current day\n    const tempInHours = getChartData(list.slice(0, 8));\n    // Format data for next 5 days\n    const tempInDays = [];\n    let sortedList = {};\n    list.reduce((prev, current) => {\n      const {\n        dt_txt,\n        main,\n        weather: [{ icon, main: alt }],\n      } = current;\n      const currentDate = getDate(dt_txt);\n      const prevDate = getDate(prev.dt_txt);\n      const dayNumber = getDay(dt_txt);\n      const day = days(dayNumber);\n      const key = `${currentDate}_${day}`;\n      const existingItems = sortedList[key] || [];\n      sortedList = {\n        ...sortedList,\n        [key]: [...existingItems, current],\n      };\n      if (currentDate !== prevDate) {\n        tempInDays.push(\n          getWeatherForecast(currentDate, dayNumber, icon, alt, day, main),\n        );\n      }\n      return current;\n    }, []);\n\n    sessionStorage.setItem('data', JSON.stringify(sortedList));\n    sessionStorage.setItem('city', JSON.stringify(city));\n\n    const [\n      {\n        dt_txt,\n        main,\n        weather: [weather],\n      },\n    ] = list;\n\n    return Promise.resolve({\n      forecast: tempInDays,\n      current: getCurrentWeather(dt_txt, weather, main, city, tempInHours),\n    });\n  });\n\nexport { loadWeatherByCity, loadWeatherByDay };\n","import React, { useState } from 'react';\nimport Forecast from './forecast';\nimport Current from './Current';\nimport { loadWeatherByDay } from './WeatherService';\n\n/**\n * Weather component.\n */\nconst Weather = ({ forecast, current }) => {\n  const [currentWeather, setCurrentWeather] = useState(current);\n\n  function onForecastClick(day) {\n    setCurrentWeather(loadWeatherByDay(day));\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <Current data={currentWeather} />\n        <div className=\"dropdown-divider\" />\n        <Forecast data={forecast} forecastClick={onForecastClick} />\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","// @flow\nimport React, { Component } from 'react';\nimport { Search, Weather } from './components';\nimport { loadWeatherByCity } from './components/weather/WeatherService';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: '',\n      data: {},\n      loader: true,\n    };\n  }\n\n  componentDidMount() {\n    loadWeatherByCity().then(data => {\n      this.setState({ loader: false, data });\n    });\n  }\n\n  render() {\n    const { data, loader } = this.state;\n    console.log(data);\n    return (\n      <div className=\"container pt-5\">\n        <Search />\n        {!loader && (\n          <Weather\n            current={data.current}\n            chart={data.chart}\n            forecast={data.forecast}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}